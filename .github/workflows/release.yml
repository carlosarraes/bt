name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: '1.24.4'

jobs:
  # Pre-release validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release (contains alpha, beta, rc)
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Validate tag format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid tag format. Expected: v1.2.3 or v1.2.3-beta"
          exit 1
        fi

    - name: Check if tag exists
      run: |
        if ! git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
          echo "Tag ${{ steps.version.outputs.version }} does not exist"
          exit 1
        fi

    - name: Run quick tests
      run: make test-short

  # Build binaries for all platforms
  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Build binary
      run: |
        mkdir -p build
        BINARY_NAME="bt-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 \
        go build -trimpath -ldflags "-s -w -X github.com/carlosarraes/bt/pkg/version.Version=${{ needs.validate.outputs.version }}" \
        -o build/${BINARY_NAME} ./cmd/bt

    - name: Create archive
      run: |
        cd build
        BINARY_NAME="bt-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
          zip "${BINARY_NAME%.exe}.zip" "$BINARY_NAME"
          ARCHIVE_NAME="${BINARY_NAME%.exe}.zip"
        else
          tar -czf "${BINARY_NAME}.tar.gz" "$BINARY_NAME"
          ARCHIVE_NAME="${BINARY_NAME}.tar.gz"
        fi
        
        # Generate checksum
        sha256sum "$ARCHIVE_NAME" > "$ARCHIVE_NAME.sha256"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bt-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/*
        retention-days: 1

  # Run comprehensive tests before release
  test:
    name: Test Release
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Run full test suite
      run: |
        make test
        make test-race
        make vet
        make fmt-check

    - name: Run security checks
      run: |
        go install github.com/securecodewarrior/sast-scan/cmd/gosec@latest
        make security || true

  # Create GitHub release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build, test]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Organize release assets
      run: |
        mkdir -p release
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec cp {} release/ \;
        
        # Create combined checksums file
        cd release
        cat *.sha256 > checksums.txt
        rm *.sha256

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        PREV_TAG=$(git tag -l "v*" | grep -v "$VERSION" | sort -V | tail -1)
        
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        
        if [ -n "$PREV_TAG" ]; then
          echo "### Changes since $PREV_TAG" >> release_notes.md
          git log --pretty=format:"- %s (%h)" "$PREV_TAG..$VERSION" >> release_notes.md
        else
          echo "### Initial release" >> release_notes.md
          git log --pretty=format:"- %s (%h)" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "Download the appropriate binary for your platform from the assets below." >> release_notes.md
        echo "" >> release_notes.md
        echo "### Quick install:" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "curl -L https://github.com/carlosarraes/bt/releases/download/$VERSION/bt-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m | sed 's/x86_64/amd64/').tar.gz | tar -xz" >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: Release ${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        files: release/*
        prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
        generate_release_notes: false
        draft: false
        fail_on_unmatched_files: true

    - name: Update latest release (if not prerelease)
      if: needs.validate.outputs.is_prerelease == 'false'
      run: |
        gh release edit ${{ needs.validate.outputs.version }} --latest
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release notifications
  notify:
    name: Post-release Notifications
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: always()
    steps:
    - name: Notify on success
      if: needs.release.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.validate.outputs.version }} created successfully!"
        echo "üîó https://github.com/carlosarraes/bt/releases/tag/${{ needs.validate.outputs.version }}"
        
    - name: Notify on failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.validate.outputs.version }} failed!"
        echo "Check the workflow logs for details."
        exit 1